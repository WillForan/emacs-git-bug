#+OPTIONS: toc:nil
* git-bug elisp functions for emacs
A minimal interface to [[https://github.com/git-bug/][git-bug]] for emacs.

This package provides a =completing-read= menu to match existing bugs and another menu to act on a bug.

Likely the most novel[fn:1] feature is =M-x git-bug-new-from-line=. This function will create a new git-bug from a line like
#+begin_src
# TODO: a commented note for later in the source code
#+end_src
and then add the bug reference to the line, so the outcome of running the function is an updated line like
#+begin_src
# TODO(gb#abcd123): a commented note for later in the source code
#+end_src


[[file:doc/demo-inline.gif]]
[[file:doc/demo-menu-close.gif]]

[fn:1] [[https://code.visualstudio.com/blogs/2020/05/06/github-issues-integration#_creating-an-issue-from-anywhere][VS code's github-issue-integration]] also does similiar. Are there other implementations?

** Highlights
#+begin_src elisp :exports results :output results table
  ;; (load-file "git-bug.el")
  (defun doc-one-line (func) (replace-regexp-in-string "\n.*" "" (documentation func)))
  (setq doclist
        '(git-bug-menu
          git-bug-new-from-line
          git-bug-edit-at-line
          git-bug-ls
          ))
  (mapcar (lambda (func)
            (format "=%s=|%s\n"
                    (symbol-name func)
                    (doc-one-line func)))
          doclist)
#+end_src

#+RESULTS:
| =git-bug-menu=          | Choose a bug and than action each from a list.                  |
| =git-bug-new-from-line= | Create a bug from TODO/FIX/BUG: on the current line.            |
| =git-bug-edit-at-line=  | Edit first match of gb#1234567 on the current line.             |
| =git-bug-ls=            | Use ‘git bug‘’s built-in ‘org-mode‘ format to display all bugs. |

*** git-bug-menu actions
From  ~git-bug-menu-actions-alist~
#+begin_src elisp :exports results :output results table
  (mapcar (lambda (kv)
            (format "=%s=|%s\n"
                    (car kv)
                    (doc-one-line (cdr kv))))
          git-bug-menu-actions-alist)
#+end_src

#+RESULTS:
| =show=    | Create a new buffer to show this ‘bugid‘’s title and it’s comments. |
| =edit=    | Edit bug ‘BUGID‘ in temporary buffer.                               |
| =insert=  | Insert gb# issue number at current position in buffer.              |
| =close=   | Close issue.                                                        |
| =comment= | Create a new comment for bug ‘BUGID‘ in via EDITOR.                 |
| =open=    | Reopen issue.                                                       |
| =rm=      | Remove issue.                                                       |

** Setup

Here's an example install and configure for =~/.emacs.d/init.el= using =use-package-vc-install= (Emacs 30)
#+begin_src elisp :eval never
(use-package git-bug
  :vc (:url "https://github.com/WillForan/emacs-git-bug")
  :ensure t
  :bind
  ("C-c b m" . git-bug-menu)
  ("C-c b c" . git-bug-new-from-line)
  :config
  (evil-leader/set-key "#" #'git-bug-menu)
  (evil-leader/set-key "3" #'git-new-from-line))
#+end_src

** Kludge

=git-bug-edit-bug= and =git-bug-comment-new= use ~git-bug~'s built in edit-from-cli setup (gb#cc5fa60). This works well in emacs if
  1. emacs is launched like =emacs --daemon= or you've run =server-start= from within
  2. =EDITOR= on system environment has been set to e.g. ~emacsclient -c~

* See also
 * [[https://github.com/alphapapa/magit-todos][magit-todos]] =magit-todo-list=
 * [[https://github.com/tarsius/hl-todo][hl-todo]] =hl-todo-rgrep=
 * [[https://github.com/magit/forge][magit/forge]]'s [[https://magit.vc/manual/forge/Creating-Topics-and-Posts.html]["topics and posts"]] =forge-list-topics=
 * [[https://code.visualstudio.com/blogs/2020/05/06/github-issues-integration#_creating-an-issue-from-anywhere][visual studio code's github-issue-integration]]
 * [[https://github.com/git-bug/][git-bug]] alternatives/similiar projects
   * Radicle's [[https://radicle.xyz/guides/user#working-with-issues][Collaborative OBject (COB) issues]]
   * [[https://gitlab.com/bugseverywhere/bugseverywhere][bugs everywhere]] (via [[https://codeberg.org/forgejo/forgejo/issues/2629][forgejo discussion]])
   * [[https://fossil-scm.org/][fossil]] has issue tracking built-in (as well as a wiki, forum, chat)
   * [[https://f3.forgefriends.org/][Friendly Forge Format]] ([[https://code.forgejo.org/f3][forgejo/f3]]; JSON schema) (cf. [[https://forgefed.org/][forgefed]] activitypub; [[https://blog.liw.fi/posts/bug-exchange-format/][XML bug exchange format]] c. 2009)
   * other lists: [[https://dist-bugs.branchable.com/software/][dist-bugs]], [[https://en.wikipedia.org/wiki/Template:Bug_tracking_systems][wikipedia/Bug_tracking_systems]]

* git-bug

** Initial Setup
Getting started with =git-bug= can be tricky ([[https://github.com/git-bug/git-bug/issues/1331][git-bug#1331]]), especially pointing to ssh keys ([[https://github.com/git-bug/git-bug/issues/1023][git-bug#1023]]) and initializing an identity (=git bug user new=).

Those can both be accomplished like
#+begin_src bash :eval never
# ssh-agent git identity for pushing (cf. gpg-agent)
if [ -z "$SSH_AUTH_SOCK" ]; then
  eval $(ssh-agent -s)
  ssh-add ~/.ssh/id_ed25519
fi

# $PWD/.git/config [git-bug] 'identity' section.
# implicit defaults made explicit, plus gravatar
git_email=$(git config get user.email)
avatar_url=https://www.gravatar.com/avatar/$(tr -d '\n' <<<  ${git_email,,} | sha256sum | cut -f1 -d' ')
git config get git-bug.identity ||
  git bug user new \
    -n "$(git config get user.name)"\
    -e "$git_email" \
    -a "$avatar_url"
#+end_src


* Current Issues
Putting the issues here for fun. Fun that costs an easily out of date and/or high-churn readme.

#+begin_src bash :colnames '(date bug title) :exports both
  git-bug bug -s open -f json |
   jq -r '.[]|[.create_time.time[0:10], .id[0:7], .title]|@tsv' |
   sort -nr
#+end_src

#+RESULTS:
|       date | bug     | title                                                            |
|------------+---------+------------------------------------------------------------------|
| 2025-09-01 | 59e13c7 | git-bug-new-from-line should include file:line when creating     |
| 2025-08-31 | cc5fa60 | refactor new and edit so edit can reuse temp buffer of new       |
| 2025-08-31 | 7b002ae | need to exit and return when bug is saved. also regexp is wrong? |
| 2025-08-30 | e7a8b7c | edit message color like commit-message                           |
| 2025-08-30 | 94e034c | git-bug porcelain for magit-forge                                |
| 2025-08-30 | 6588bc5 | list of git-bug project directories for overview of all page     |
| 2025-08-30 | 3a93c2e | minor-mode for clickable buttons, company/cornfu completion?     |
